{"ast":null,"code":"var _jsxFileName = \"/Users/chelsealogan/Documents/GitHub/CapstoneGroupProject/capstone-group-project/src/menu/Menu.js\",\n    _s = $RefreshSig$();\n\n// Start of Menu \nimport { useState } from 'react';\nimport MenuItem from './../menu-item/MenuItem';\nimport './Menu.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Menu = ({\n  startingItems\n}) => {\n  _s();\n\n  // Setting the value of the \"startingItems\" prop (AKA the \"menuItems\" array as the starting state value for the \"Items\" state variable)\n  const [items, setItems] = useState(startingItems); // In React you are not allowed to mutate (AKA Change) the state directly for any state value. Instead you create a new copy of the value and st that as the new state value using the function returned form the useSate function\n\n  const updateQty = (id, newQty) => {\n    // A new updated copy fot eh menuItems/items array is created and set to the \"newItems\" variable bu mapping through the current value fo the array and updating the qty (quantity) value for the object (AKA Type of pizza) that was selected\n    const newItems = items.map(item => {\n      // Checking to if the id passed into the updateQty function matches the id of the array item/object that is currently being passed into this function\n      if (item.id === id) {\n        // Creating a new object and spreading the properties in the array item/object that is currently being passed into this function. Also, updating the value of the qty property by overriding the value for that property. Finally, returning the new object so it will be added as an item in the new array that is returned from using the map method.\n        return { ...item,\n          qty: newQty\n        };\n      } // Returning the item without making any changes to it\n\n\n      return item;\n    }); // Setting the new array value (AKA \"newItems\" variable) tha was returned from the map method as teh new state value for \"items\".Also, because the \"setItems\" state function is used to update the value for \"items\" the Menu component re-renders which caused the three MenuItem component to re-render as well. \n\n    setItems(newItems);\n  }; // Using forEach to run a function for each object in the \"items\" value (AKA the \"menuItem array\". Each time the function is run it multiples the price and quantity (AKA qty) values for that object (AKA Array item/ Type of Pizza) and adds the to the current \"total\" value. When it has runt the function for each item in the array it plugs in the final \"total\" value  into the h2 element int eh Menu component.\n\n\n  let total = 0;\n  items.forEach(item => {\n    total += item.price * item.qty;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Menu\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"Menu-title\",\n      children: \"Farm 2 Table\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(MenuItem // Keys help React identify which items have change, are added, or removed\n      , {\n        id: item.id,\n        type: item.type,\n        price: item.price,\n        qty: item.qty // {...item} This can be done in place of creating new props for the MenuItem component, because using spread will pass the properties in the object as props and values in the MEnuItem component\n        // Passing the \"updateQty\" function as a value for the updateQty props in the \"menuItem\" component \n        ,\n        updateQty: updateQty\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Grand Total $\", total]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Menu, \"3yyIXq+1WpfvV8CZmSxZjQq/VS8=\");\n\n_c = Menu;\nexport default Menu;\n\nvar _c;\n\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"sources":["/Users/chelsealogan/Documents/GitHub/CapstoneGroupProject/capstone-group-project/src/menu/Menu.js"],"names":["useState","MenuItem","Menu","startingItems","items","setItems","updateQty","id","newQty","newItems","map","item","qty","total","forEach","price","type"],"mappings":";;;AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAO,YAAP;;;AAIA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AAAA;;AAChC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAACG,aAAD,CAAlC,CAFgC,CAKhC;;AACA,QAAMG,SAAS,GAAG,CAACC,EAAD,EAAKC,MAAL,KAAgB;AAC9B;AACA,UAAMC,QAAQ,GAAGL,KAAK,CAACM,GAAN,CAAUC,IAAI,IAAI;AAC/B;AACA,UAAIA,IAAI,CAACJ,EAAL,KAAYA,EAAhB,EAAoB;AAChB;AACA,eAAO,EAAE,GAAGI,IAAL;AAAWC,UAAAA,GAAG,EAAEJ;AAAhB,SAAP;AACH,OAL8B,CAM/B;;;AACA,aAAOG,IAAP;AACH,KARgB,CAAjB,CAF8B,CAW9B;;AACAN,IAAAA,QAAQ,CAACI,QAAD,CAAR;AACH,GAbD,CANgC,CAuBhC;;;AACA,MAAII,KAAK,GAAG,CAAZ;AACAT,EAAAA,KAAK,CAACU,OAAN,CAAcH,IAAI,IAAI;AAClBE,IAAAA,KAAK,IAAIF,IAAI,CAACI,KAAL,GAAaJ,IAAI,CAACC,GAA3B;AACH,GAFD;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBAEKR,KAAK,CAACM,GAAN,CAAUC,IAAI,iBACX,QAAC,QAAD,CACI;AADJ;AAGI,QAAA,EAAE,EAAEA,IAAI,CAACJ,EAHb;AAII,QAAA,IAAI,EAAEI,IAAI,CAACK,IAJf;AAKI,QAAA,KAAK,EAAEL,IAAI,CAACI,KALhB;AAMI,QAAA,GAAG,EAAEJ,IAAI,CAACC,GANd,CAOI;AAEA;AATJ;AAUI,QAAA,SAAS,EAAEN;AAVf,SAESK,IAAI,CAACJ,EAFd;AAAA;AAAA;AAAA;AAAA,cADH;AAFL;AAAA;AAAA;AAAA;AAAA,YAFJ,eAmBI;AAAA,kCAAkBM,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH,CArDD;;GAAMX,I;;KAAAA,I;AAsDN,eAAeA,IAAf","sourcesContent":["// Start of Menu \nimport { useState } from 'react'\nimport MenuItem from './../menu-item/MenuItem'\nimport './Menu.css'\n\n\n\nconst Menu = ({ startingItems }) => {\n    // Setting the value of the \"startingItems\" prop (AKA the \"menuItems\" array as the starting state value for the \"Items\" state variable)\n    const [items, setItems] = useState(startingItems);\n\n\n    // In React you are not allowed to mutate (AKA Change) the state directly for any state value. Instead you create a new copy of the value and st that as the new state value using the function returned form the useSate function\n    const updateQty = (id, newQty) => {\n        // A new updated copy fot eh menuItems/items array is created and set to the \"newItems\" variable bu mapping through the current value fo the array and updating the qty (quantity) value for the object (AKA Type of pizza) that was selected\n        const newItems = items.map(item => {\n            // Checking to if the id passed into the updateQty function matches the id of the array item/object that is currently being passed into this function\n            if (item.id === id) {\n                // Creating a new object and spreading the properties in the array item/object that is currently being passed into this function. Also, updating the value of the qty property by overriding the value for that property. Finally, returning the new object so it will be added as an item in the new array that is returned from using the map method.\n                return { ...item, qty: newQty }\n            }\n            // Returning the item without making any changes to it\n            return item;\n        });\n        // Setting the new array value (AKA \"newItems\" variable) tha was returned from the map method as teh new state value for \"items\".Also, because the \"setItems\" state function is used to update the value for \"items\" the Menu component re-renders which caused the three MenuItem component to re-render as well. \n        setItems(newItems)\n    }\n\n\n\n    // Using forEach to run a function for each object in the \"items\" value (AKA the \"menuItem array\". Each time the function is run it multiples the price and quantity (AKA qty) values for that object (AKA Array item/ Type of Pizza) and adds the to the current \"total\" value. When it has runt the function for each item in the array it plugs in the final \"total\" value  into the h2 element int eh Menu component.\n    let total = 0;\n    items.forEach(item => {\n        total += item.price * item.qty;\n    });\n\n\n    return (\n        <div className='Menu'>\n            <h1 className='Menu-title'>Farm 2 Table</h1>\n            <div>\n                {/* Using the map method, which returns a new array who's items values are determined by what is returned from the function passed into the map method. This function is run for each item in the array that the amp method is ued on. In this case a new MenuItem component is returned/created each the function is run */}\n                {items.map(item => (\n                    <MenuItem\n                        // Keys help React identify which items have change, are added, or removed\n                        key={item.id}\n                        id={item.id}\n                        type={item.type}\n                        price={item.price}\n                        qty={item.qty}\n                        // {...item} This can be done in place of creating new props for the MenuItem component, because using spread will pass the properties in the object as props and values in the MEnuItem component\n\n                        // Passing the \"updateQty\" function as a value for the updateQty props in the \"menuItem\" component \n                        updateQty={updateQty}\n                    />\n                ))}\n            </div>\n            <h2>Grand Total ${total}</h2>\n        </div>\n    );\n}\nexport default Menu;"]},"metadata":{},"sourceType":"module"}